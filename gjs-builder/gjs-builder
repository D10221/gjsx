#!/usr/bin/env bash

usage() {
    echo "gjs workspace helper"
    echo "wrkspc [options]"
    echo "  options:"
    echo "      -b  'build'     <src/?>"
    echo "      -B  'flatpak-builder build'"
    echo "      -d  'set debug'"
    echo "      -D  'start debug'"
    echo "      -h  'help'      shows this"
    echo "      -i  'flatpak-builder install'"
    echo "      -m  'module' run/start flag"
    echo "      -s  'start'     <dist/?>"
    echo "      -t  'target'    <esbuild target>    default: auto by gjs-version"
    echo "      -u  'flatpak uninstall'"
    echo "      -r  flatpak run"
}
if [ -z "$1" ]; then
    usage
    exit 1
fi
GTK_DEBUG=''
# TARGET=''
OUTDIR="dist"
SRC_DIR="src"
if [ -z "$APP_ID" ]; then
    APP_ID=$(cat package.json | jq '.application_id' | tr -d '"')
fi
echo APP_ID=$APP_ID
while getopts ':bBdhimsrt:u' arg; do
    case $arg in
    b)
        # target: "firefox91", // Since GJS 1.71.1
        # target: "firefox78", // Since GJS 1.65.90
        # target: "firefox68", // Since GJS 1.63.90
        # target: "firefox60", // Since GJS 1.53.90
        if [ -z "$TARGET" ]; then
            if [ -z "$GJS_VERSION" ]; then
                GJS_VERSION=$(gjs --version)
                R='([0-9]+\.[0-9]+\.[0-9]+)'
                [[ "$GJS_VERSION" =~ $R ]] && GJS_VERSION="${BASH_REMATCH[1]}"
            fi
            if [[ "$GJS_VERSION" == "1.71.1" || "$GJS_VERSION" > "1.71.1" ]]; then
                TARGET="firefox91"
            elif [[ "$GJS_VERSION" == "1.65.90" || "$GJS_VERSION" > "1.65.90" ]]; then
                TARGET="firefox78"
            elif [[ "$GJS_VERSION" == "1.63.90" || "$GJS_VERSION" > "1.63.90" ]]; then
                TARGET="firefox68"
            elif [[ "$GJS_VERSION" == "1.53.90" || "$GJS_VERSION" > "1.53.90" ]]; then
                TARGET="firefox60"
            else
                TARGET="firefox60"
            fi
        fi
        echo "GJS_VERSION=$GJS_VERSION TARGET=$TARGET"
        if [ ! -z $OPTARG ]; then
            SRC_FILE="$SRC_DIR/$OPTARG"
        else
            SRC_FILE="$(cat package.json | jq '.src' | tr -d '"')"
        fi
        if [ ! -f $SRC_FILE ]; then
            echo "can't find $SRC_FILE" >&2
            exit 1
        fi
        FORMAT="--format=esm" # check tsconfig ?
        esbuild "--target=$TARGET" --loader:.xml=text --bundle --outdir=$OUTDIR "$FORMAT" --external:gi://* $SRC_FILE
        ;;
    B)
        BUILD_DIR="build"
        flatpak-builder --force-clean $BUILD_DIR $APP_ID.json
        # exit $?
        ;;
    d)
        GTK_DEBUG='interactive'
        ;;
    D)
        flatpak-builder --run $BUILD_DIR $APP_ID.json sh
        # exit $?
        ;;
    h) # help
        usage
        exit
        ;;
    i)
        BUILD_DIR="build"
        flatpak-builder --user --install --force-clean $BUILD_DIR $APP_ID.json
        ;;
    m)
        MODULE='-m'
        ;;
    r)
        flatpak -vvvv run $APP_ID
        ;;
    s) # start
        if [ ! -z "$OPTARG" ]; then
            DIST_FILE="$OUTDIR/$OPTARG"
        else
            DIST_FILE="$(cat package.json | jq '.main' | tr -d '"')"
        fi
        if [ ! -f $DIST_FILE ]; then
            echo "can't find '$DIST_FILE'" >&2
            exit 1
        fi        
        if [ ! -z "$GTK_DEBUG" ];then
            GTK_DEBUG="GTK_DEBUG=\"$GTK_DEBUG\""
        fi
        CMD="$GTK_DEBUG gjs $MODULE $DIST_FILE"
        echo CMD="$CMD"
        bash -c "$CMD"
        ;;
    t) # target
        TARGET="$OPTARG"
        echo "TARGET=$TARGET"
        ;;
    u)
        flatpak uninstall $APP_ID -y
        ;;
    :)
        echo "Expected '-$OPTARG' [value]" >&2
        usage
        exit 1
        ;;
    ?)
        echo "Unkown option -$OPTARG [value]" >&2
        usage
        exit 1
        ;;
    esac
done
